/**
 * Code generated by protoc-gen-twirp_js v5.0.0, DO NOT EDIT.
 * source: policystore.proto
 */
// import our twirp js library dependency
var createClient = require("twirp");
// import our protobuf definitions
var pb = require("./policystore_pb.js");
Object.assign(module.exports, pb);

/**
 * PolicyStore is a component that is responsible for maintaining a list of
 * currently active data policies that are in use within the DECODE IoT pilot.
 * It exposes an API by which clients can create or delete policies from the
 * system, and importantly it exposes an API by which the DECODE wallet can
 * retrieve a list of active policies which allows the wallet to then present a
 * UI to the end user by which they will be able to choose which policies they
 * wish to take part in.
 */
module.exports.createPolicyStoreClient = function(baseurl, extraHeaders, useJSON) {
    var rpc = createClient(baseurl, "decode.iot.policystore.PolicyStore", "v5.0.0",  useJSON, extraHeaders === undefined ? {} : extraHeaders);
    return {
        /**
         * CreateEntitlementPolicy is a method exposed by the service which allows a
         * new entitlement policy to be created and stored within the device
         * registration service. Once a policy has been created, users will then be
         * able to apply this policy to their devices via the wallet.
         */
        createEntitlementPolicy: function(data) { return rpc("CreateEntitlementPolicy", data, pb.CreateEntitlementPolicyResponse); },
        /**
         * DeleteEntitlementPolicy is a method exposed by the service which allows an
         * authorized client to request that an entitlement policy be deleted.
         * Deleting a policy will not affect any existing devices that have already
         * used the policy in order to create one or more streams within the encoder,
         * however it will prevent any new applications of that policy to other
         * devices.
         */
        deleteEntitlementPolicy: function(data) { return rpc("DeleteEntitlementPolicy", data, pb.DeleteEntitlementPolicyResponse); },
        /**
         * ListEntitlementPolicies is a method exposed by the service which returns a
         * list of all policies currently defined and available within the service to
         * be applied to devices. Currently it just returns a list of all known
         * policies with no capability to filter or paginate these policies.
         */
        listEntitlementPolicies: function(data) { return rpc("ListEntitlementPolicies", data, pb.ListEntitlementPoliciesResponse); }
    }
}

